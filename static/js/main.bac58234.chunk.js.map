{"version":3,"sources":["components/Header.jsx","components/TallyInput.jsx","components/EventDisplay.jsx","components/TallyView.jsx","components/App.jsx","index.js"],"names":["Header","brandText","Navbar","bg","variant","expand","sticky","Brand","Toggle","aria-controls","Collapse","id","Nav","className","onSelect","selectedKey","console","log","Link","href","NavDropdown","title","Item","Divider","target","TallyInput","tallyConfigs","recordTally","Row","map","config","Col","xs","style","padding","Button","onClick","buttonLabel","lastEvent","paddingLeft","fontStyle","moment","fromNow","EventDisplay","event","Date","toLocaleDateString","undefined","hour","minute","day","month","year","TallyView","tallyData","displayEvents","data","display","events","thisDate","prevDate","i","length","borderTop","getFullYear","getMonth","getHours","getDate","push","fontWeight","label","find","cloneDeep","require","App","defaultValue","key","React","useState","stickyValue","window","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","useStickyState","displayName","setData","basename","path","tallyId","newData","tally","tallyEvents","eventData","now","toISOString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bac58234.chunk.js","sourcesContent":["import React from \"react\";\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\n\nconst Header = ({brandText}) => {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" sticky=\"top\">\n            <Navbar.Brand>{brandText}</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav\n                    className=\"container-fluid\"\n                    onSelect={(selectedKey) => {\n                        console.log(`selected ${selectedKey}`);\n                    }}\n                >\n                    <Nav.Link href=\"/tally/#/\">Counter</Nav.Link>\n                    <Nav.Link href=\"/tally/#/view\">View</Nav.Link>\n                    <NavDropdown title=\"Options\" id=\"basic-nav-dropdown\" className=\"ml-auto\">\n                        <NavDropdown.Item href=\"/4\">Config 4</NavDropdown.Item>\n                        <NavDropdown.Item href=\"/5\">Config 5</NavDropdown.Item>\n                        <NavDropdown.Divider />\n                        <NavDropdown.Item href=\"/share\">Share data</NavDropdown.Item>\n                        <NavDropdown.Item href=\"/config\">Configure</NavDropdown.Item>\n                        <NavDropdown.Divider />\n                        <NavDropdown.Item href=\"https://github.com/joecullin/tally\" target=\"_blank\">About</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n};\n  \nexport default Header;","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport moment from \"moment\";\n\nconst TallyInput = ({tallyConfigs, recordTally}) => {\n    return (\n        <Row>\n        {tallyConfigs.map(config => {\n            return (\n                <Col key={config.id} xs=\"12\" style={{padding: \"2em\"}}>\n                    <div>\n                        <Button\n                            onClick={() => recordTally(config.id)}\n                        >\n                            {config.buttonLabel}\n                        </Button>\n                        {config.lastEvent &&\n                            <span style={{paddingLeft: \"1em\", fontStyle: \"italic\"}}>\n                                {\"last: \" + moment(config.lastEvent).fromNow()}\n                            </span>\n                        }\n                    </div>\n                </Col>\n            );\n        })}\n        </Row>\n    );\n};\n  \nexport default TallyInput;","import React from \"react\";\n// import moment from \"moment\";\n\nconst EventDisplay = ({event, style}) => {\n    const dateDisplaySpec = {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        day: \"numeric\",\n        month: \"short\",\n        year: \"numeric\",\n    };\n    return (\n        <span style={{\n            ...style,\n            padding: \".25em .5em\",\n        }}>\n            {(new Date(event)).toLocaleDateString(undefined, dateDisplaySpec)}\n        </span>\n    );\n};\n  \nexport default EventDisplay;","import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport EventDisplay from \"./EventDisplay\";\n\nconst TallyView = ({tallyConfigs, tallyData}) => {\n\n    const displayEvents = (data) => {\n        let display = [];\n        if (data && data.events){\n            let thisDate;\n            let prevDate;\n            for (let i=data.events.length-1; i>=0; i--){\n                const event = data.events[i];\n\n                // add a divider line between days\n                let borderTop = \"none\";\n                thisDate = new Date(event);\n                if (prevDate && (\n                    prevDate.getFullYear() !== thisDate.getFullYear() ||\n                    prevDate.getMonth() !== thisDate.getMonth() ||\n                    prevDate.getHours() !== thisDate.getHours() ||\n                    prevDate.getDate() !== thisDate.getDate()))\n                {\n                    borderTop = \"solid 1px gray\"\n                }\n\n                display.push(\n                    <Col key={i} xs=\"12\" style={{paddingLeft: \"3em\"}}>\n                        <EventDisplay style={{borderTop}} event={event}/>\n                    </Col>\n                );\n                prevDate = thisDate;\n            }\n        }\n        return display;\n    };\n\n    return (\n        <div className=\"text-left\">\n            {tallyConfigs.map(config => {\n                return (\n                    <Row key={config.id}>\n                        <Col key={config.id} xs=\"12\" style={{padding: \"1em\", paddingLeft: \"2em\", fontWeight: \"bold\"}}>\n                            {config.label}\n                        </Col>\n                        {displayEvents(tallyData.find(data => data.id === config.id))}\n                    </Row>\n                );\n            })}\n        </div>\n    );\n};\n  \nexport default TallyView;","import '../assets/css/App.css';\nimport '../assets/css/bootstrap.min.css';\nimport React from \"react\";\nimport Header from \"./Header\";\nimport TallyInput from \"./TallyInput\";\nimport TallyView from \"./TallyView\";\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nvar cloneDeep = require('lodash.clonedeep');\n\nfunction useStickyState(defaultValue, key) {\n    const [value, setValue] = React.useState(() => {\n        const stickyValue = window.localStorage.getItem(key);\n        return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\n    });\n    React.useEffect(() => {\n        window.localStorage.setItem(key, JSON.stringify(value));\n    }, [key, value]);\n    return [value, setValue];\n}\n\nfunction App() {\n\n    const defaultConfigAndData = {\n        id: \"default\",\n        displayName: \"Tally Something!\",\n        tallyConfigs: [{\n            id: \"default\",\n            label: \"My Counter\",\n            buttonLabel: \"Count event!\",\n            lastEvent: null,\n        }],\n        tallyData: [{\n            id: \"default\",\n            events: [],\n        }],\n    };\n\n    const [data, setData] = useStickyState(defaultConfigAndData, \"tallyData\");\n\n    const recordTally = (tallyId) => {\n        console.log(`recordTally for '${tallyId}'`);\n        const newData = cloneDeep(data);\n        const tally = newData.tallyConfigs.find(tally => tally.id === tallyId);\n        const tallyEvents = newData.tallyData.find(eventData => eventData.id === tallyId);\n        if (tally && tallyEvents){\n            const now = (new Date()).toISOString();\n            tally.lastEvent = now;\n            tallyEvents.events.push(now);\n            setData(newData);\n        }\n    };\n\n    return (\n        <Router basename=\"/tally/\">\n            <div className=\"App text-left\">\n                <Header\n                    brandText={data.displayName}\n                />\n                <Switch>\n                    <Route path=\"/view\">\n                        <TallyView\n                            tallyConfigs={data.tallyConfigs ? data.tallyConfigs : []}\n                            tallyData={data.tallyData ? data.tallyData : []}\n                         />\n                    </Route>\n                    <Route path=\"/\">\n                        <TallyInput\n                            tallyConfigs={data.tallyConfigs ? data.tallyConfigs : []}\n                            recordTally={(id) => recordTally(id)}\n                        />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}